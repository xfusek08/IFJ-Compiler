















' Everything in one test

' big count of function parameters

function testing(n as integer, a AS double, b AS double, c AS double, d AS integer, e AS double, f AS double, g AS integer, h AS integer, i AS integer, j AS double, k AS double, l AS integer, m AS double, o AS integer, p AS integer, q AS integer, r AS double, s AS double, t AS double, u AS double, v AS integer, w AS double, x AS double, y AS integer, z AS integer, aa AS double, ab AS double, ac AS integer, ad AS integer, ae AS integer, af AS double, ag AS integer, ah AS double, ai AS integer, aj AS integer, ak AS double, al AS double, am AS double, an AS double, ao AS integer, ap AS integer, aq AS double, ar AS integer, at AS integer, au AS double, av AS integer, aw AS integer, ax AS integer, ay AS integer, az AS integer, ba AS double, bb AS integer, bc AS double, bd AS double, be AS double, bf AS integer, bg AS double, bh AS integer, bi AS integer, bj AS integer, bk AS integer, bl AS integer, bm AS double, bn AS double, bo AS integer, bp AS double, bq AS double, br AS integer, bs AS integer, bt AS double, bu AS double, bv AS integer, bw AS double, bx AS integer, by AS integer, bz AS double, ca AS double, cb AS double, cc AS integer, cd AS double, ce AS integer, cf AS integer, cg AS double, ch AS double, ci AS integer, cj AS double, ck AS double, cl AS double, cm AS double, cn AS integer, co AS double, cp AS double, cq AS double, cr AS integer, cs AS integer, ct AS integer, cu AS double, cv AS integer, cw AS double, cx AS integer) as integer
    dim res as integer
    if n > 0 then
        n = n - 1
        res = testing(n, a, b, c, d, e, f, g, h, i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx)
        return res
    else
        return a - b * c + d * e + f * g * h * i - j * k + l - m - o * p - q + r - s - t - u + v - w - x - y * z - aa + ab * ac - ad - ae * af - ag + ah * ai * aj + ak * al - am * an * ao + ap + aq + ar + at + au * av * aw + ax + ay + az - ba + bb + bc - bd - be * bf * bg - bh - bi + bj + bk - bl * bm - bn * bo * bp - bq * br * bs - bt + bu + bv - bw * bx * by - bz * ca * cb * cc + cd - ce * cf + cg * ch + ci - cj - ck - cl * cm + cn * co - cp - cq * cr - cs * ct + cu - cv * cw * cx
    end if
end function

declare function __(ahoj as integer) as integer

function foo(a as integer) as integer
    dim b as integer = a
    dim c as integer
    c = __(b)
    print c;
    return b + 10
end function

' Multiplier listing

function multiply(a as integer, b as integer) as integer
    return a * b
end function

' factorial by recursion
declare function factorial (n As integer) As integer

function factorial (n As integer) As integer
    dim temp_result As integer
    dim decremented_n As integer
    dim result As integer
    if n < 2 Then
        result = 1
    Else
        decremented_n = n - 1
        temp_result = factorial(decremented_n)
        result = n * temp_result
    end if
    Return result
end function

function __(a as integer) as integer
    dim bl__6790 as integer
    if a > 2 then
        bl__6790 = __(a - 1)
        return 0
    else
        print a;
        return 0
    end if
end function

function fib(n as integer) as integer
    if n = 0 then
        return 0
    elseif n = 1 then
        return 1
    else
        dim a as integer
        dim b as integer
        dim c as integer
        a = fib(n - 1)
        b = fib(n - 2)
        c = a + b
        return c
    end if
    return 0
end function

function hanoi(n as integer, from as string, too as string, middle as string) as integer
    dim c as integer
    if n = 1 then
        print !"Move disk 1 from row "; from; !" to rod "; too; !"\n";
        return 0
    end if
    c = hanoi(n - 1, from, middle, too)
    print !"Move disk"; n; !" from row "; from; !" to rod "; too; !"\n";
    c = hanoi(n - 1, middle, too, from)
end function


scope
    dim a as integer
    input a
    a = foo(a)

    dim b as integer = 31.7
    do while a > 2
        do while b > 5
            print a * b;
            b = b - 1
        loop
        a = a - 1
    loop

    dim f as double = 31.2
    dim g as double = 4e2
    dim h as double = 4e2-2
    dim i as double = 4.4e2
    dim j as double = 4.4e-2

    dim __78d as integer = 1
    dim GKJ__78 as double
    do while __78d < 5
        GKJ__78 = GKJ__78 + f + g + h + i + j
        __78d = __78d + 1
        print GKJ__78;
    loop

    print a;

    dim __j33eno as string
    input __j33eno
    print __j33eno;

    scope
    dim c as double = 47.86
    dim a as integer = 110
    dim b as integer = 100
    if 47 > 32 then
        do while c > 44
            a = 110
            b = 100
            do while b > 7
                do while a > 0-110
                    print !"\n";
                    if a > 58 then
                        print a;
                    elseif a > 0-60 then
                        print a;
                    else
                        print a;
                    end if
                    a = a - 1
                    if a = 0-110 then
                        b = 0
                    end if
                loop
            loop
            c = c - 1.05
        loop
    else
        print 78;
    end if

    end scope

    scope

        dim c as integer
        c = fib(12)
        print c;

    end scope

    scope

        dim c as integer
        c = hanoi(4, !"A", !"B", !"C")
    end scope

    ' complex expression

    scope
        dim a as integer = 74
        dim b as double = 745.745
        dim c as double = 0-123456789

        dim d as double

        c = (a * a) + b / b - b * a + (b * (a * a + b * a + c * 7 + 2 * 5 * b) - b * 78 * 96 - b * a + (b + c + b + c + b + c)) / c
        print c;
        print !"\n";
        d = a + (b / c) - (7 + b - 0 / (2 * (4 - a + 8 * 9 / (c * 74 - c + c * (b * 8 + 4) + b * a / c + 7) - a + 7) - a * b / b) + 1)/4
        d = d - 2 * d
        print d;
    end scope

    dim res as integer
    res = factorial(3)
    print res;

    ' reference program working with strings and builtin functions
    Scope
        'Hlavni telo programu
        dim s1 As String
        dim s2 As String
        dim s1len As Integer
        s1 = !"Toto je nejaky text"
        s2 = s1 + !", ktery jeste trochu obohatime"
        Print s1; !"\n"; s2; !"\n";
        s1len = Length(s1)
        s1len = s1len - 4 + 1
        s1 = SubStr(s2, s1len, 4)
        Print !"4 znaky od "; s1len; !". znaku v \""; s2; !"\":"; s1; !"\n";
        Print !"Zadejte serazenou posloupnost vsech malych pismen a-h, ";
        Print !"pricemz se pismena nesmeji v posloupnosti opakovat";
        Input s1
        print !"?";
        Do While (s1 <> !"abcdefgh")
            Print !"\nSpatne zadana posloupnost, zkuste znovu";
            Input s1
            print !"!";
        Loop
    End Scope

    ' factorial by iteration method

    scope 'Hlavni telo programu
    Dim a As Integer
    DIM vysl AS INTEGER
    PrinT !"Zadejte cislo pro vypocet faktorialu";
    InpuT A
    If a < 0 THEN
    print !"\nFaktorial nelze spocitat\n";
    ELSE
    Vysl = 1
    Do WHile A > 0
    VYSL = vysl * a
    a = A - 1
    LooP
    Print vYsl;
    end IF
    END SCOPE

    SCOPE

    dim vysledek as double
    dim citatel as integer
    citatel = 1
    dim jmenovatel as integer
    jmenovatel = 1

    dim pocitadlo as integer
    pocitadlo = 1

    do while pocitadlo < 20

        vysledek = vysledek + citatel / jmenovatel

        citatel = citatel * 2
        jmenovatel = jmenovatel * pocitadlo

        pocitadlo = pocitadlo + 1

    loop

    print vysledek;

    END SCOPE

    scope
        dim res as integer
        res = testing(10, 4, 1, 1, 8, 15, 8, 1, 7, 12, 4, 10, 0, 2, 8, 0, 7, 6, 15, 3, 5, 14, 11, 2, 5, 4, 6, 2, 13, 12, 0, 14, 10, 5, 4, 6, 13, 7, 10, 11, 13, 9, 12, 0, 7, 5, 13, 14, 4, 15, 13, 12, 5, 9, 14, 4, 14, 15, 5, 12, 9, 8, 3, 14, 11, 0, 3, 9, 3, 3, 14, 6, 7, 11, 4, 4, 12, 8, 11, 11, 4, 4, 4, 14, 3, 12, 6, 5, 11, 15, 3, 7, 0, 14, 5, 10, 15, 5, 1, 12, 5)
        if res = -12697 then
            print !"OK";
        else
            print !"NONOK";
        end if
    end scope

    scope
    dim a as integer = 1

    do while a < 10

        dim b as integer = 1

         do while b < 10

            print multiply(a, b);

            b = b + 1
        loop
        print !"\n";
        a = a + 1
    loop

end scope


end scope